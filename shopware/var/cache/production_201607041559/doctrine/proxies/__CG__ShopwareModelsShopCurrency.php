<?php

namespace Shopware\Proxies\__CG__\Shopware\Models\Shop;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Currency extends \Shopware\Models\Shop\Currency implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'id', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'currency', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'name', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'default', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'factor', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'symbol', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'symbolPosition', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'position'];
        }

        return ['__isInitialized__', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'id', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'currency', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'name', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'default', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'factor', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'symbol', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'symbolPosition', '' . "\0" . 'Shopware\\Models\\Shop\\Currency' . "\0" . 'position'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Currency $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrency($currency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrency', [$currency]);

        return parent::setCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrency()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrency', []);

        return parent::getCurrency();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefault($default)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefault', [$default]);

        return parent::setDefault($default);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefault()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefault', []);

        return parent::getDefault();
    }

    /**
     * {@inheritDoc}
     */
    public function setFactor($factor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFactor', [$factor]);

        return parent::setFactor($factor);
    }

    /**
     * {@inheritDoc}
     */
    public function getFactor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFactor', []);

        return parent::getFactor();
    }

    /**
     * {@inheritDoc}
     */
    public function setSymbol($symbol)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSymbol', [$symbol]);

        return parent::setSymbol($symbol);
    }

    /**
     * {@inheritDoc}
     */
    public function getSymbol()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSymbol', []);

        return parent::getSymbol();
    }

    /**
     * {@inheritDoc}
     */
    public function setSymbolPosition($symbolPosition)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSymbolPosition', [$symbolPosition]);

        return parent::setSymbolPosition($symbolPosition);
    }

    /**
     * {@inheritDoc}
     */
    public function getSymbolPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSymbolPosition', []);

        return parent::getSymbolPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function setPosition($position)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPosition', [$position]);

        return parent::setPosition($position);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosition', []);

        return parent::getPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toString', []);

        return parent::toString();
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function fromArray(array $array = array (
), array $fillable = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fromArray', [$array, $fillable]);

        return parent::fromArray($array, $fillable);
    }

    /**
     * {@inheritDoc}
     */
    public function setOneToOne($data, $model, $property, $reference = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneToOne', [$data, $model, $property, $reference]);

        return parent::setOneToOne($data, $model, $property, $reference);
    }

    /**
     * {@inheritDoc}
     */
    public function setOneToMany($data, $model, $property, $reference = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneToMany', [$data, $model, $property, $reference]);

        return parent::setOneToMany($data, $model, $property, $reference);
    }

    /**
     * {@inheritDoc}
     */
    public function setManyToOne($data, $model, $property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setManyToOne', [$data, $model, $property]);

        return parent::setManyToOne($data, $model, $property);
    }

}
